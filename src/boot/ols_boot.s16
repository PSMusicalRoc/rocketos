# This is code more or less taken from OliveStem's
# YouTube series - it's here basically as a reference
# as I learn and code my own things.

.code16
.global bootstart

bootstart:
    jmp main
    nop

# DISK HEADER
bdb_oem:                    .ascii "MSWIN4.1"
bdb_bytes_per_sector:       .2byte 512
bdb_sectors_per_cluster:    .byte 1
bdb_reserved_sectors:       .2byte 1
bdb_fat_count:              .byte 2
bdb_dir_entries_count:      .2byte 0xe0
bdb_total_sectors:          .2byte 2880
bdb_media_descriptor_type:  .byte 0xf0
bdb_sectors_per_fat:        .2byte 9
bdb_sectors_per_track:      .2byte 18
bdb_heads:                  .2byte 2
bdb_hidden_sectors:         .4byte 0
bdb_large_sector_count:     .4byte 0

ebr_drive_number:           .byte 0
                            .byte 0
ebr_signature:              .byte 0x29
ebr_volume_id:              .byte 0x12,0x34,0x56,0x78
ebr_volume_label:           .ascii "ROCKETOS   "
ebr_system_id:              .ascii "FAT12   "

# END DISK HEADER

main:
    mov $0, %ax
    mov %ax, %ds
    mov %ax, %es
    mov %ax, %ss    
    mov $0x7c00, %sp # sets stack pointer to application code

    mov bdb_sectors_per_fat, %ax
    mov bdb_fat_count, %bl
    xor %bh, %bh
    mul %bx # ax is now the number of sectors of fat
    add bdb_reserved_sectors, %ax # LBA of root directory
    push %ax

    mov bdb_dir_entries_count, %ax
    shl $5, %ax # mul ax by 32
    xor %dx, %dx
    divw bdb_bytes_per_sector # (32*num entries) / bytes per sector = num sectors to read

    test %dx, %dx
    jz find_rootdir
    inc %ax # round ax up if there is a remainder

find_rootdir:
    mov %al, %cl # num sectors to read
    pop %ax # lba
    mov ebr_drive_number, %dl
    mov $buffer, %bx
    call disk_read

    xor %bx, %bx
    mov $buffer, %di # root directory is now in memory (buffer)

kernel_search:
    mov $boot2_filename, %si
    mov $11, %cx # size of file name
    push %di # preserve buffer
    repe cmpsb
    pop %di
    je kernel_search_found # if we found the kernel, load it

    add $32, %di
    inc %bx
    cmp bdb_dir_entries_count, %bx # have we hit the number of dirs that exist?
    jl kernel_search

    jmp kernel_search_not_found

kernel_search_not_found:
    mov $msg_boot2_not_found, %si
    call print

    hlt
    jmp halt

kernel_search_found:
    mov 26(%di), %ax # get 26th byte - cluster offset
    mov %ax, boot2_cluster
    mov bdb_reserved_sectors, %ax
    mov $buffer, %bx
    mov bdb_sectors_per_fat, %cl
    mov ebr_drive_number, %dl

    call disk_read

    mov $boot2_load_segment, %bx
    mov %bx, %es
    mov $boot2_load_offset, %bx

kernel_load:
    mov boot2_cluster, %ax
    add $31, %ax # offset to cluster thing in floppy disk
    mov $1, %cl # number of sectors to read
    mov ebr_drive_number, %dl

    call disk_read

    add bdb_bytes_per_sector, %bx

    # find next cluster to read
    mov boot2_cluster, %ax
    mov $3, %cx
    mul %cx
    mov $2, %cx
    div %cx # boot2_cluster * 3 / 2 = next cluster loc

    mov $buffer, %si
    add %ax, %si
    mov %ds:(%si), %ax

    or %dx, %dx
    jz kernel_load_even

kernel_load_odd:
    shr $4, %ax
    jmp kernel_load_next_cluster

kernel_load_even:
    and $0x0fff, %ax

kernel_load_next_cluster:
    cmp $0x0ff8, %ax
    jae kernel_load_finish

    mov %ax, boot2_cluster
    jmp kernel_load

kernel_load_finish:
    mov ebr_drive_number, %dl
    mov $boot2_load_segment, %ax
    mov %ax, %ds
    mov %ax, %es

    jmp $boot2_load_segment, $boot2_load_offset
    hlt

halt:
	jmp halt

print:
    push %si
    push %ax
    push %bx

print_loop:
    lodsb # loads a character from si and puts it in al
    or %al, %al # end at zero
    jz print_end

    mov $0x0e, %ah # print character in al to screen
    mov $0, %bh # page num
    int $0x10 # video interrupt

    jmp print_loop

print_end:
    pop %bx
    pop %ax
    pop %si
    ret

# INPUT:
#   AX: LBA index
# OUTPUT
#   CX[bits 0-5]: sector number
#   CX[bits 6-15]: cylinder
#   DH: head
lba_to_chs:
    push %ax
    push %dx

    xor %dx, %dx
    divw bdb_sectors_per_track # LBA % sectors_per_track + 1 = sector
    # ax has division, dx has modulus
    inc %dx # sector!
    mov %dx, %cx

    # head: ax % num heads
    # cylinder: ax / num_heads
    xor %dx, %dx
    divw bdb_heads

    mov %dl, %dh # head
    mov %al, %ch
    shl $6, %ah
    or %ah, %cl # cylinder

    pop %ax
    mov %al, %dl
    pop %ax
    ret

disk_read:
    push %ax
    push %bx
    push %cx
    push %dx
    push %di

    call lba_to_chs

    mov $0x02, %ah
    mov $3, %di # try reading 3 times

disk_read_retry:
    stc
    int $0x13
    jnc disk_read_done

    call disk_read_reset

    dec %di
    test %di, %di
    jnz disk_read_retry

disk_read_fail:
    mov $disk_read_fail_msg, %si
    call print
    hlt
    jmp halt

disk_read_reset:
    pusha
    mov $0, %ah
    stc
    int $0x13
    jc disk_read_fail
    popa
    ret


disk_read_done:
    pop %di
    pop %dx
    pop %cx
    pop %bx
    pop %ax

    ret

disk_read_fail_msg:     .asciz "FAILED TO READ DISK\n"

# KERNEL FILE PROPERTIES
boot2_filename:         .ascii "KERNEL  BIN"
msg_boot2_not_found:    .asciz "BOOT2.BIN NOT FOUND!"
boot2_cluster:          .2byte 0

.equ boot2_load_segment, 0x1000
.equ boot2_load_offset, 0

# spaces to the end of bytes
.zero 510-(.-bootstart)
.2byte 0xaa55

buffer:
